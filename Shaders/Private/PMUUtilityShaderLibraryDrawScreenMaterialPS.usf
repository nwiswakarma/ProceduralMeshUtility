////////////////////////////////////////////////////////////////////////////////
//
// MIT License
// 
// Copyright (c) 2018-2019 Nuraga Wiswakarma
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//

#include "/Engine/Private/Common.ush"

#ifndef PMU_USE_SOURCE_MAP
#define PMU_USE_SOURCE_MAP 0
#endif

#if PMU_FILTER_HAS_VALID_MATERIAL_DOMAIN

Texture2D SourceMap;
SamplerState SourceMapSampler;

#include "/Engine/Generated/Material.ush"

void MainPS(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
	)
{
	ResolvedView = ResolveView();

    float2 UV = Input.UV;
    float4 SvPosition = Input.Position;

	float3 WSPosition   = SvPositionToWorld(SvPosition);
	float3 CameraVector = normalize(View.WorldCameraOrigin - WSPosition);

	FMaterialPixelParameters MaterialParameters = MakeInitializedMaterialPixelParameters();

#if NUM_MATERIAL_TEXCOORDS
	for (int CoordinateIndex=0; CoordinateIndex<NUM_MATERIAL_TEXCOORDS; CoordinateIndex++)
	{
		MaterialParameters.TexCoords[CoordinateIndex] = UV;
	}
#endif

	MaterialParameters.TwoSidedSign = 1;
	MaterialParameters.VertexColor = 1;
	MaterialParameters.CameraVector = CameraVector;
	MaterialParameters.SvPosition = SvPosition;
	MaterialParameters.ScreenPosition = SvPositionToScreenPosition(SvPosition);
	MaterialParameters.LightVector = float3(0,0,-1);
	MaterialParameters.AbsoluteWorldPosition                   =
        MaterialParameters.WorldPosition_CamRelative           =
        MaterialParameters.WorldPosition_NoOffsets             =
        MaterialParameters.WorldPosition_NoOffsets_CamRelative = WSPosition;

	FPixelMaterialInputs PixelMaterialInputs;
	CalcPixelMaterialInputs(MaterialParameters, PixelMaterialInputs);

    float3 Color   = GetMaterialEmissive(PixelMaterialInputs);
	float  Opacity = GetMaterialOpacity(PixelMaterialInputs);

    OutColor = float4(Color, Opacity);
}

#else

void MainPS(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0
	)
{
    OutColor = 0;
}

#endif
