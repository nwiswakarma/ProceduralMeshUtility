////////////////////////////////////////////////////////////////////////////////
//
// MIT License
// 
// Copyright (c) 2018-2019 Nuraga Wiswakarma
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//

/*------------------------------------------------------------------------------
	Compile time parameters:
		THREAD_SIZE_X - The number of threads (x) to launch per workgroup
		THREAD_SIZE_Y - The number of threads (y) to launch per workgroup
------------------------------------------------------------------------------*/

#include "PMUMeshUtilityApplyHeightMapToMeshSection_Common.ush"

Texture2D HeightTexture;
SamplerState HeightTextureSampler;

[numthreads(THREAD_SIZE_X,1,1)]
void ApplyHeightMap(uint3 tid : SV_DispatchThreadID)
{
	const uint VertexId = tid.x;

    // Skip out of bounds threads
    if (VertexId >= _VertexCount)
	{
		return;
	}

    const uint PosAttrId = 3 * VertexId;

    float2 UV;

#if PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_USE_UV_BUFFER
    UV = UVData[VertexId].xy * _UVScale;
#else
    UV.x = OutPositionData[PosAttrId  ];
    UV.y = OutPositionData[PosAttrId+1];
    UV *= _UVScale;
#endif

    uint ColorId = VertexId * PMU_FLAG_MASK_BY_COLOR;
    float ColorMask = dot(ColorData[ColorId] * _ColorMask, 1);

    float HeightValue;
    HeightValue = Texture2DSample(HeightTexture, HeightTextureSampler, UV).x;

    uint TangentZId = 2 * VertexId * PMU_FLAG_ALONG_TANGENTS + 1;
    float3 HeightDirection = TangentData[TangentZId].xyz;
    float3 HeightOffset = HeightValue * _HeightScale * ColorMask * HeightDirection;

    OutPositionData[PosAttrId  ] += HeightOffset.x;
    OutPositionData[PosAttrId+1] += HeightOffset.y;
    OutPositionData[PosAttrId+2] += HeightOffset.z;
}
