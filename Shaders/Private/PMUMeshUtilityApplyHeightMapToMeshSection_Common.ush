////////////////////////////////////////////////////////////////////////////////
//
// MIT License
// 
// Copyright (c) 2018-2019 Nuraga Wiswakarma
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//

/*------------------------------------------------------------------------------
	Compile time parameters:
		THREAD_SIZE_X - The number of threads (x) to launch per workgroup
		THREAD_SIZE_Y - The number of threads (y) to launch per workgroup
------------------------------------------------------------------------------*/

#include "/Engine/Private/Common.ush"

RWBuffer<float> OutPositionData;
RWByteAddressBuffer OutTangentData;

Buffer<float4> ColorData;
Buffer<float2> UVData;
Buffer<float4> TangentData;

uint _VertexCount;
float _HeightScale;

float2 _UVScale;
float4 _ColorMask;

int4 _Flags;

#define PMU_FLAG_ALONG_TANGENTS     _Flags.x
#define PMU_FLAG_MASK_BY_COLOR      _Flags.y
#define PMU_FLAG_INVERSE_COLOR_MASK 0

#ifndef PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_USE_UV_BUFFER
#define PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_USE_UV_BUFFER 0
#endif

uint4 U32ToU8x4(uint v)
{
    uint4 unpacked;
    unpacked.x = ((v >>  0) & 0xFF);
    unpacked.y = ((v >>  8) & 0xFF);
    unpacked.z = ((v >> 16) & 0xFF);
    unpacked.w = ((v >> 24) & 0xFF);
    return unpacked;
}

int4 U32ToI8x4(uint v)
{
    int4 unpacked;
    unpacked.x = ((v >>  0) & 0xFF);
    unpacked.y = ((v >>  8) & 0xFF);
    unpacked.z = ((v >> 16) & 0xFF);
    unpacked.w = ((v >> 24) & 0xFF);
    return unpacked;
}

float4 U8x4ToSNF32x4(uint4 v)
{
    return (v/255.0f)*2.0f-1.0f;
}

float4 I8x4ToSNF32x4(int4 v)
{
    return v/127.0f;
}

uint PackNormalizedFloat4(float4 v)
{
	int4 n;
    n = v * 127.4999f;
    n = n & 0xFF;
	return n.x | (n.y << 8) | (n.z << 16) | (n.w << 24);
}

float GetColorMask(float4 v)
{
    return dot(v*float4(1,1,1,0), _ColorMask);
}
