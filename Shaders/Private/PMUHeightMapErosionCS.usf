////////////////////////////////////////////////////////////////////////////////
//
// MIT License
// 
// Copyright (c) 2018-2019 Nuraga Wiswakarma
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//

/*------------------------------------------------------------------------------
	Compile time parameters:
		THREAD_SIZE_X - The number of threads (x) to launch per workgroup
		THREAD_SIZE_Y - The number of threads (y) to launch per workgroup
------------------------------------------------------------------------------*/

#define DELTA_T DeltaTData[_DeltaTId]
#define IDX(xy) xy.x + xy.y * _Dim.x
#define LDX(xy) xy.x + xy.y * THREAD_SIZE_X

#define FLOW_PIPE_AREA     _FlowConstants.x // 500.f
#define FLOW_PIPE_LENGTH   _FlowConstants.y
#define GRAVITY_ACCEL      _FlowConstants.z
#define EVAPORATION_FACTOR _FlowConstants.w

#define EROSION_MINIMUM_TILT      _ErosionConstants.x
#define EROSION_SEDIMENT_CONSTANT _ErosionConstants.y
#define EROSION_DISSOLVE_CONSTANT _ErosionConstants.z
#define EROSION_DEPOSIT_CONSTANT  _ErosionConstants.w

#define THERMAL_WEATHERING_AMOUNT _ThermalWeatheringConstants.x
#define THERMAL_TALUS_ANGLE       _ThermalWeatheringConstants.y

#define WG_SIZE2          256
#define WG_SIZE           128
#define GROUPSHARED_SIZE  WG_SIZE2
#define GROUP_LDS_BARRIER GroupMemoryBarrierWithGroupSync()

#define DISPATCH_COUNT_X _DispatchCount.x
#define DISPATCH_COUNT_Y _DispatchCount.y

uint2  _Dim;
uint2  _DispatchCount;
uint   _DeltaTId;
uint   _ScanElementCount;
float  _SourceAmount;
float2 _ThermalWeatheringConstants;
float4 _FlowConstants;
float4 _ErosionConstants;

Buffer<float>  DeltaTData;
Buffer<float>  DeltaTScanData;
Buffer<float>  WaterMap;
Buffer<float>  SedimentMap;
Buffer<float>  SedimentTransferMap;
Buffer<float4> ThermalTransferMapAA;
Buffer<float4> ThermalTransferMapAX;
StructuredBuffer<float4> FluxMap;
StructuredBuffer<float2> FlowMap;
Texture2D<float> HeightMap;

RWBuffer<float>  OutDeltaTData;
RWBuffer<float>  OutDeltaTScanData;
RWBuffer<float>  OutWaterMap;
RWBuffer<float>  OutSedimentMap;
RWBuffer<float>  OutSedimentTransferMap;
RWBuffer<float4> OutThermalTransferMapAA;
RWBuffer<float4> OutThermalTransferMapAX;
RWStructuredBuffer<float4> OutFluxMap;
RWStructuredBuffer<float2> OutFlowMap;
RWTexture2D<float> OutHeightMap;
RWTexture2D<float> OutFlowMagMap;

groupshared float DeltaTScanLocal[GROUPSHARED_SIZE];

int GetIdx(int2 xy2)
{
    return IDX(xy2);
}

void ScanDeltaT(uint n, uint l0)
{
    uint  offset;
    uint  nActive;
    uint2 ll = 2 * l0 + uint2(1, 2);

    [unroll]
    for (nActive=n>>1, offset=1; nActive>0; nActive>>=1, offset<<=1)
    {
        GROUP_LDS_BARRIER;
        if (l0 < nActive)
        {
            uint2 oid = offset*ll-1;
            float len0 = DeltaTScanLocal[oid.x];
            float len1 = DeltaTScanLocal[oid.y];
            DeltaTScanLocal[oid.y] = (len1 > len0) ? len1 : len0;
        }
    }

    GROUP_LDS_BARRIER;
}

[numthreads(THREAD_SIZE_X,THREAD_SIZE_Y,1)]
void ApplyWaterSources(uint3 tid : SV_DispatchThreadID)
{
    OutWaterMap[IDX(tid)] += _SourceAmount * DELTA_T;
}

[numthreads(THREAD_SIZE_X,THREAD_SIZE_Y,1)]
void ComputeFlux(uint3 tid : SV_DispatchThreadID)
{
    const int   i0 = IDX(tid);
    const int2  xy = tid.xy;
    const int2  N  = _Dim;
    const float dt = DELTA_T;
    const float fluxFactor = dt * FLOW_PIPE_AREA * GRAVITY_ACCEL / FLOW_PIPE_LENGTH;

    const float heightValue = HeightMap[xy];
    const float waterValue  = WaterMap[i0];
    const float waterHeight = heightValue + waterValue;

    const bool4 masks     = { (xy < N-1), (xy > 0) };
    const int4  offsetIds = (i0 + int4(1, N.x, -1, -N.x)) * masks;

    float4 waterHeights = {
        HeightMap[xy+int2(1,0)] + WaterMap[offsetIds.x],
        HeightMap[xy+int2(0,1)] + WaterMap[offsetIds.y],
        HeightMap[xy-int2(1,0)] + WaterMap[offsetIds.z],
        HeightMap[xy-int2(0,1)] + WaterMap[offsetIds.w]
        };

    float4 deltaHeights = waterHeight - waterHeights;

    float4 dstFlux = OutFluxMap[i0];
    float4 flux = dstFlux;

    flux += fluxFactor * deltaHeights;
    flux  = max(0.f, flux) * masks;

    float fluxSum = flux.x + flux.y + flux.z + flux.w;

    [flatten]
    if (fluxSum > waterValue)
    {
        float K = min(1.0f, (waterValue*FLOW_PIPE_LENGTH*FLOW_PIPE_LENGTH) / (fluxSum*dt));
        dstFlux = flux * K;
    }

    OutFluxMap[i0] = dstFlux;
}

[numthreads(THREAD_SIZE_X,THREAD_SIZE_Y,1)]
void SimulateFlow(
    uint3 tid : SV_DispatchThreadID,
    uint3 lid : SV_GroupThreadID,
    uint3 gid : SV_GroupID
    )
{
    const int   i0 = IDX(tid);
    const int2  xy = tid.xy;
    const int2  N  = _Dim;
    const float dt = DELTA_T;

    const bool4 masks     = { (xy < N-1), (xy > 0) };
    const int4  offsetIds = (i0 + int4(1, N.x, -1, -N.x)) * masks;

    float4 flux0 = FluxMap[i0];
    float4 flux1;

    flux1.x = FluxMap[offsetIds.x].z;
    flux1.y = FluxMap[offsetIds.y].w;
    flux1.z = FluxMap[offsetIds.z].x;
    flux1.w = FluxMap[offsetIds.w].y;
    flux1 *= masks;

    // Calculate flow amount

    float flowCurrent    = flux0.x + flux0.y + flux0.z + flux0.w;
    float flowNeighbours = flux1.x + flux1.y + flux1.z + flux1.w;
    float dV = dt * (flowNeighbours-flowCurrent);

    float srcWater = OutWaterMap[i0];
    float dstWater = srcWater + dV / (FLOW_PIPE_LENGTH * FLOW_PIPE_LENGTH);

    dstWater = max(0.f, dstWater);

    // Calculate flow velocity

    float4 flowDelta = float4(flux0.xy-flux1.xy, flux1.zw-flux0.zw) * masks;

    float2 velocity;
    velocity = (flowDelta.xy + flowDelta.zw) / (masks.xy + masks.zw);
    velocity = min(1.f, velocity);

    OutWaterMap[i0] = dstWater;
    OutFlowMap[i0]  = velocity;

    // Calculate local delta T scan data

    const uint  L  = WG_SIZE2;
    const uint  l0 = LDX(lid);

    DeltaTScanLocal[l0] = length(velocity);

    ScanDeltaT(L, l0);

    if (l0 == 0)
    {
        OutDeltaTScanData[gid.x+gid.y*DISPATCH_COUNT_X] = DeltaTScanLocal[L-1];
    }
}

[numthreads(THREAD_SIZE_X,THREAD_SIZE_Y,1)]
void SimulateErosion(uint3 tid : SV_DispatchThreadID)
{
    const int   i0 = IDX(tid);
    const int2  xy = tid.xy;
    const int2  N  = _Dim;
    const float dt = DELTA_T;

    float hE = OutHeightMap[clamp(xy+int2(1,0), 0, N-1)];
    float hN = OutHeightMap[clamp(xy+int2(0,1), 0, N-1)];
    float hW = OutHeightMap[clamp(xy-int2(1,0), 0, N-1)];
    float hS = OutHeightMap[clamp(xy-int2(0,1), 0, N-1)];

    float3 hn   = normalize(float3(hE-hW, hN-hS, 2));
    float  cosa = dot(hn, float3(0,0,1));

#if 1
    float  sina = sin(acos(cosa));
#else
    float  sina = atan(cosa);
#endif

    float flowMagnitude    = length(FlowMap[i0]);
    float surfaceTilt      = max(EROSION_MINIMUM_TILT, sina);

    float currentSediment  = SedimentMap[i0];
    float sedimentCapacity = (EROSION_SEDIMENT_CONSTANT * surfaceTilt * flowMagnitude) - currentSediment;

    float transportFactor = (sedimentCapacity > 0.f) ? EROSION_DISSOLVE_CONSTANT : EROSION_DEPOSIT_CONSTANT;
    float sedimentChange  = transportFactor * dt * sedimentCapacity;
    float sedimentToMove  = currentSediment + sedimentChange;

    float waterValue = OutWaterMap[i0] + sedimentChange;
    waterValue = max(0.f, waterValue);

    OutWaterMap[i0]             = waterValue;
    OutSedimentTransferMap[i0]  = sedimentToMove;
    OutHeightMap[xy]           -= sedimentChange;
}

[numthreads(THREAD_SIZE_X,THREAD_SIZE_Y,1)]
void TransportSediment(uint3 tid : SV_DispatchThreadID)
{
    const int   i0 = IDX(tid);
    const int2  N  = _Dim;
    const float dt = DELTA_T;

    const float2 velocity = FlowMap[i0];

    // position where flow comes from
    float2 flowDelta = float2(tid.xy) - velocity*dt;

    // integer coordinates
    int4 coord;
    coord.xy = floor(flowDelta);
    coord.zw = coord.xy + 1;

    // clamp to grid borders
    coord = clamp(coord,0,(N-1).xyxy);

    // interpolation factors
    float2 fv = flowDelta - coord.xy;
    float alpha0 = lerp(SedimentTransferMap[IDX(coord.xy)], SedimentTransferMap[IDX(coord.zy)], fv.x);
    float alpha1 = lerp(SedimentTransferMap[IDX(coord.xw)], SedimentTransferMap[IDX(coord.zw)], fv.x);
    float sediment = lerp(alpha0, alpha1, fv.y);

    OutSedimentMap[i0] = sediment;
    OutWaterMap[i0] *= EVAPORATION_FACTOR;
}

[numthreads(THREAD_SIZE_X,THREAD_SIZE_Y,1)]
void ComputeThermalWeathering(uint3 tid : SV_DispatchThreadID)
{
    const int   i0 = IDX(tid);
    const int2  xy = tid.xy;
    const int2  N  = _Dim;
    const float dt = DELTA_T;

    const int3 o = { 1, 0, -1 };

    const int3 hMaskOffsets = xy.x + int3(1, 0, -1);
    const int3 vMaskOffsets = xy.y + int3(1, 0, -1);

    const bool3 hMasks = hMaskOffsets > 0 && hMaskOffsets < N.x-1;
    const bool3 vMasks = vMaskOffsets > 0 && vMaskOffsets < N.y-1;

    const float hv = HeightMap[xy];

    // Edge masks

    bool2x4 masks;
    masks[0] = bool4(hMasks.xz, vMasks.xz);
    masks[1] = hMasks.xzxz && vMasks.xxzz;

    // Neighbour heights

    float2x4 hvs = {
        { HeightMap[xy+o.xy], HeightMap[xy+o.zy], HeightMap[xy+o.yx], HeightMap[xy+o.yz] },
        { HeightMap[xy+o.xx], HeightMap[xy+o.zx], HeightMap[xy+o.xz], HeightMap[xy+o.zz] }
        };

    hvs  = hv - hvs;
    hvs *= masks;

    // Find neighbouring texels maximum height delta

    float maxHeightDelta = 0;
    maxHeightDelta = max(maxHeightDelta, hvs[0][0]);
    maxHeightDelta = max(maxHeightDelta, hvs[0][1]);
    maxHeightDelta = max(maxHeightDelta, hvs[0][2]);
    maxHeightDelta = max(maxHeightDelta, hvs[0][3]);
    maxHeightDelta = max(maxHeightDelta, hvs[1][0]);
    maxHeightDelta = max(maxHeightDelta, hvs[1][1]);
    maxHeightDelta = max(maxHeightDelta, hvs[1][2]);
    maxHeightDelta = max(maxHeightDelta, hvs[1][3]);
    maxHeightDelta *= maxHeightDelta >= THERMAL_TALUS_ANGLE;

    // Filter height transfer based on the specified talus angle
    hvs *= hvs >= THERMAL_TALUS_ANGLE;

    // Calculate height transfer amount

    float transportAmount = maxHeightDelta / 2.f * dt * THERMAL_WEATHERING_AMOUNT;
    float transportSum = 0;

    transportSum += hvs[0][0];
    transportSum += hvs[0][1];
    transportSum += hvs[0][2];
    transportSum += hvs[0][3];
    transportSum += hvs[1][0];
    transportSum += hvs[1][1];
    transportSum += hvs[1][2];
    transportSum += hvs[1][3];

    const bool bValidTransport = abs(transportSum) > .0001f;

    // Avoid division by zero
    transportSum = bValidTransport ? transportSum : .0001f;

    // Neighbour thermal weathering height transfer
    hvs = (transportAmount * hvs / transportSum) * bValidTransport;

    OutHeightMap[xy] = hv - transportAmount;
    OutThermalTransferMapAA[i0] = hvs[0];
    OutThermalTransferMapAX[i0] = hvs[1];
}

[numthreads(THREAD_SIZE_X,THREAD_SIZE_Y,1)]
void TransferThermalWeathering(uint3 tid : SV_DispatchThreadID)
{
    const int   i0 = IDX(tid);
    const int2  xy = tid.xy;
    const int2  N  = _Dim;
    const float dt = DELTA_T;

    const int3 o = { 1, 0, -1 };

    const int3 hMaskOffsets = xy.x + int3(1, 0, -1);
    const int3 vMaskOffsets = xy.y + int3(1, 0, -1);

    const bool3 hMasks = hMaskOffsets > 0 && hMaskOffsets < N.x-1;
    const bool3 vMasks = vMaskOffsets > 0 && vMaskOffsets < N.y-1;

    const float hv = HeightMap[xy];

    bool2x4 masks;
    masks[0] = bool4(hMasks.xz, vMasks.xz);
    masks[1] = hMasks.xzxz && vMasks.xxzz;

    int2x4 io = {
        { GetIdx(xy+o.xy), GetIdx(xy+o.zy), GetIdx(xy+o.yx), GetIdx(xy+o.yz) },
        { GetIdx(xy+o.xx), GetIdx(xy+o.zx), GetIdx(xy+o.xz), GetIdx(xy+o.zz) }
        };

    io *= masks;

    float2x4 tvs = {
        {
            ThermalTransferMapAA[io[0][0]].y,
            ThermalTransferMapAA[io[0][1]].x,
            ThermalTransferMapAA[io[0][2]].w,
            ThermalTransferMapAA[io[0][3]].z,
        },
        {
            ThermalTransferMapAX[io[1][0]].w,
            ThermalTransferMapAX[io[1][1]].z,
            ThermalTransferMapAX[io[1][2]].y,
            ThermalTransferMapAX[io[1][3]].x 
        } };

    tvs *= masks;

    float tv = hv;
    tv += tvs[0][0];
    tv += tvs[0][1];
    tv += tvs[0][2];
    tv += tvs[0][3];
    tv += tvs[1][0];
    tv += tvs[1][1];
    tv += tvs[1][2];
    tv += tvs[1][3];
    OutHeightMap[xy] = tv;
}

[numthreads(THREAD_SIZE_X,THREAD_SIZE_Y,1)]
void WriteFlowMapMagnitude(uint3 tid : SV_DispatchThreadID)
{
    OutFlowMagMap[tid.xy] = length(FlowMap[IDX(tid)]) / 100.0;
}

[numthreads(WG_SIZE,1,1)]
void ScanDeltaTGroup(
    uint3 tid : SV_DispatchThreadID,
    uint3 lid : SV_GroupThreadID,
    uint3 gid : SV_GroupID
    )
{
    const uint  L  = WG_SIZE2;
    const uint  i0 = tid.x;
    const uint  l0 = lid.x;
    const uint  g0 = gid.x;

    uint2 did = (2*i0) + uint2(0,1);
    uint2 bid = (2*l0) + uint2(0,1);

    DeltaTScanLocal[bid.x] = (did.x < _ScanElementCount) ? DeltaTScanData[did.x] : 0;
    DeltaTScanLocal[bid.y] = (did.y < _ScanElementCount) ? DeltaTScanData[did.y] : 0;

    ScanDeltaT(L, l0);

    if (l0 == 0)
    {
        OutDeltaTData[g0] = DeltaTScanLocal[L-1];
    }
}

[numthreads(WG_SIZE,1,1)]
void ScanDeltaTTopLevel(
    uint3 tid : SV_DispatchThreadID,
    uint3 lid : SV_GroupThreadID,
    uint3 gid : SV_GroupID
    )
{
    const uint  L  = WG_SIZE2;
    const uint  i0 = tid.x;
    const uint  l0 = lid.x;
    const uint  g0 = gid.x;

    uint2 did = (2*i0) + uint2(0,1);
    uint2 bid = (2*l0) + uint2(0,1);

    DeltaTScanLocal[bid.x] = (did.x < _ScanElementCount) ? OutDeltaTData[did.x] : 0;
    DeltaTScanLocal[bid.y] = (did.y < _ScanElementCount) ? OutDeltaTData[did.y] : 0;

    ScanDeltaT(L, l0);

    if (l0 == 0)
    {
        float maxLength = DeltaTScanLocal[L-1];
        float dt = 1.f / max(1.5f * maxLength, .0001);

        OutDeltaTData[_DeltaTId] = min(dt, 0.05f);
    }
}
