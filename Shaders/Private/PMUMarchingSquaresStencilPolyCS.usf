////////////////////////////////////////////////////////////////////////////////
//
// MIT License
// 
// Copyright (c) 2018-2019 Nuraga Wiswakarma
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//

/*------------------------------------------------------------------------------
	Compile time parameters:
		THREAD_SIZE_X - The number of threads (x) to launch per workgroup
		THREAD_SIZE_Y - The number of threads (y) to launch per workgroup
------------------------------------------------------------------------------*/

#include "PMUMarchingSquaresCommon.ush"

#define FEATURE_APPLY_X 1
#define FEATURE_APPLY_Y 2

const static float M_1_PI = 0.318309886183790671538f;

uint2 _MapDim;
uint  _FillType;

struct LineGeom
{
    float4 P0; // Line points: p0, p1
    float4 P1; // Line points: p2, p3
    float4 P2; // Line extensions: p1, p2
    float4 P3; // Line extensions: p0, p3
};

// SRV

Texture2D<uint>            StencilTexture;
Buffer<uint>               VoxelStateData;
StructuredBuffer<LineGeom> LineGeomData;

// UAV

RWBuffer<uint> OutVoxelStateData;
RWBuffer<uint> OutVoxelFeatureData;

RWTexture2D<float4> OutDebugTexture;

// UTILITY FUNCTIONS

bool IsPointOnTri(float2 p, float2 tp0, float2 tp1, float2 tp2)
{
    float dX = p.x-tp2.x;
    float dY = p.y-tp2.y;
    float dX21 = tp2.x-tp1.x;
    float dY12 = tp1.y-tp2.y;
    float D = dY12*(tp0.x-tp2.x) + dX21*(tp0.y-tp2.y);
    float s = dY12*dX + dX21*dY;
    float t = (tp2.y-tp0.y)*dX + (tp0.x-tp2.x)*dY;
    return (D < 0.f)
        ? ((s <= 0.f) && (t <= 0.f) && ((s+t) >= D))
        : ((s >= 0.f) && (t >= 0.f) && ((s+t) <= D));
}

float3 SegmentIntersectionDelta(float2 SegmentStartA, float2 SegmentEndA, float2 SegmentStartB, float2 SegmentEndB)
{
    float2 VectorA = SegmentEndA - SegmentStartA;
    float2 VectorB = SegmentEndB - SegmentStartB;
    float2 DeltaAB = SegmentStartA - SegmentStartB;
    float2 crossAB = { (VectorA.x * VectorB.y - VectorB.x * VectorA.y), 1 };

    // Avoid division by zero and invalidate intersection
    [flatten]
    if (abs(crossAB.x) < .0001f)
    {
        crossAB = float2(.0001f, 0);
    }

    float D = 1.f / crossAB.x;
    float S = ((VectorA.x * DeltaAB.y) - (VectorA.y * DeltaAB.x)) * D;
    float T = ((VectorB.x * DeltaAB.y) - (VectorB.y * DeltaAB.x)) * D;

    bool   bHasIntersection = (S >= 0 && S <= 1 && T >= 0 && T <= 1) && (crossAB.y > .5f);
    float2 deltaIntersect   = (T * VectorA);
    float  distSq           = dot(deltaIntersect, deltaIntersect);

    return float3(deltaIntersect, bHasIntersection);
}

float4 FindIntersection(float2 SegmentStart, float2 SegmentEnd, LineGeom ld, int cmpIdx)
{
    float4 s0 = { SegmentIntersectionDelta(SegmentStart, SegmentEnd, ld.P0.xy, ld.P0.zw), 0 };
    float4 s1 = { SegmentIntersectionDelta(SegmentStart, SegmentEnd, ld.P0.zw, ld.P1.xy), 1 };
    float4 s2 = { SegmentIntersectionDelta(SegmentStart, SegmentEnd, ld.P1.xy, ld.P1.zw), 2 };
    bool3  bValid = float3(s0.z, s1.z, s2.z) > .5f;
    float4 s = 0;
    [flatten] if (bValid[0]) { s = s0; }
    [flatten] if (bValid[1] && (s1[cmpIdx] < s[cmpIdx] || s.z < .5f)) { s = s1; }
    [flatten] if (bValid[2] && (s2[cmpIdx] < s[cmpIdx] || s.z < .5f)) { s = s2; }
    return s;
}

float2 ClosestPointOnSegment(float2 pt, float2 p0, float2 p1)
{
	float2 p01 = p1 - p0;
	float2 p0t = pt - p0;

	float Dot1 = dot(p0t, p01);
	float Dot2 = dot(p01, p01);

    float2 sp = p0 + p01 * (Dot1 / Dot2);

    [flatten]
	if (Dot1 <= 0)
	{
		sp = p0;
	}
    else
	if (Dot2 <= Dot1)
	{
		sp = p1;
	}

	return sp;
}

// KERNEL FUNCTIONS

[numthreads(THREAD_SIZE_X,THREAD_SIZE_Y,1)]
void VoxelWriteStateKernel(uint3 tid : SV_DispatchThreadID)
{
    const uint tidx = tid.x + tid.y * _MapDim.x;

    float2 vPos = float2(tid.xy);
    float2 cPos = vPos + 0.5f;

    uint polyId = StencilTexture.Load(int3(tid.xy, 0)).r & 0xFFFF;

    bool bIsPoly = polyId;
    bool bIsEdge = (polyId > 1);

    uint lid    = (polyId-1) * bIsPoly;
    LineGeom ld = LineGeomData[lid];

    // Calculate voxel line sign

    float2 lpL1 = ld.P0.zw;
    float2 lpL2 = ld.P1.xy;
    float2 lpL4 = ld.P2.xy;
    float2 lpL5 = ld.P2.zw;

    float2 lpA1 = ld.P0.xy;
    float2 lpA4 = ld.P3.xy;
    float2 lpB2 = ld.P1.zw;
    float2 lpB5 = ld.P3.zw;

    float2 lpL41Ortho = lpL1-lpL4;
    float2 lpL12Ortho = lpL2-lpL1;
    float2 lpL25Ortho = lpL5-lpL2;

    float2 lpA41Ortho = lpA1-lpA4;
    float2 lpAL1Ortho = lpL1-lpA1;
    float2 lpLB2Ortho = lpB2-lpL2;
    float2 lpB25Ortho = lpB5-lpB2;

    lpL12Ortho = float2(-lpL12Ortho.y, lpL12Ortho.x);
    lpL41Ortho = float2(-lpL41Ortho.y, lpL41Ortho.x);
    lpL25Ortho = float2(-lpL25Ortho.y, lpL25Ortho.x);

    lpAL1Ortho = float2(-lpAL1Ortho.y, lpAL1Ortho.x);
    lpLB2Ortho = float2(-lpLB2Ortho.y, lpLB2Ortho.x);
    lpA41Ortho = float2(-lpA41Ortho.y, lpA41Ortho.x);
    lpB25Ortho = float2(-lpB25Ortho.y, lpB25Ortho.x);

    float4 cvPt = float4(vPos, cPos);
    float4 cvL1 = cvPt - lpL1.xyxy;
    float4 cvL4 = cvPt - lpL4.xyxy;
    float4 cvL2 = cvPt - lpL2.xyxy;
    float4 cvA1 = cvPt - lpA1.xyxy;
    float4 cvA4 = cvPt - lpA4.xyxy;
    float4 cvB2 = cvPt - lpB2.xyxy;

    // Figure showing points and line layout with orthogonal directions
    //
    // A4      L4      L5      B5
    // |       |       |       |
    // |->A41  |->L41  |       |
    // |       |       |       |
    // |       |  L25<-|  B25<-|
    // |       |       |       |
    // v       v       v       v
    // |       |       |       |
    // A1----->L1----->L2----->B2
    // |  AL1  |  L12  |  LB2  |
    // |   |   |   |   |   |   |
    // |   v   |   v   |   v   |
    // |       |       |       |
    // ======= POLY SIDE =======

    bool2 bOrthoSgnL12 = (float2(dot(cvL1.xy, lpL12Ortho), dot(cvL1.zw, lpL12Ortho)) >= 0);
    bool2 bOrthoSgnL41 = (float2(dot(cvL4.xy, lpL41Ortho), dot(cvL4.zw, lpL41Ortho)) >= 0);
    bool2 bOrthoSgnL25 = (float2(dot(cvL2.xy, lpL25Ortho), dot(cvL2.zw, lpL25Ortho)) >= 0);

    bool2 bOrthoSgnAL1 = (float2(dot(cvA1.xy, lpAL1Ortho), dot(cvA1.zw, lpAL1Ortho)) >= 0);
    bool2 bOrthoSgnA41 = (float2(dot(cvA4.xy, lpA41Ortho), dot(cvA4.zw, lpA41Ortho)) >= 0);

    bool2 bOrthoSgnLB2 = (float2(dot(cvL2.xy, lpLB2Ortho), dot(cvB2.zw, lpLB2Ortho)) >= 0);
    bool2 bOrthoSgnB25 = (float2(dot(cvB2.xy, lpB25Ortho), dot(cvB2.zw, lpB25Ortho)) >= 0);

    bool2 bSgn0 =  bOrthoSgnL41 && bOrthoSgnL12 &&  bOrthoSgnL25;
    bool2 bSgnA =  bOrthoSgnA41 && bOrthoSgnAL1 && !bOrthoSgnL41;
    bool2 bSgnB = !bOrthoSgnL25 && bOrthoSgnLB2 &&  bOrthoSgnB25;
    bool2 bFilled = bIsPoly && (!bIsEdge || bSgn0 || bSgnA || bSgnB);

    // Write state

    uint lastState  = OutVoxelStateData[tidx];
    uint lastVState = lastState & 0xFF;
    uint lastCState = (lastState >> 8) & 0xFF;
    uint fillType   = _FillType & 0xFF;

    uint vState = bFilled.x ? _FillType : lastVState;
    uint cState = bFilled.y ? _FillType : lastCState;

    OutVoxelStateData[tidx] = vState | (cState << 8) | (lid << 16);

    //OutDebugTexture[tid.xy] = bIsEdge;
}

[numthreads(THREAD_SIZE_X,THREAD_SIZE_Y,1)]
void VoxelWriteFeatureKernel(uint3 tid : SV_DispatchThreadID)
{
    const uint2 CDim = _MapDim-1;

    const uint2 cid  = tid.xy;
    const uint  tidx = tid.x + tid.y * _MapDim.x;

    // Write cell data to local cache if required

    // Skip out-of-bounds cells
    if (any(cid >= CDim))
    {
        return;
    }

    uint2  uEdgeXY = U32ToU16x2(OutVoxelFeatureData[tidx]);
    float2 fEdgeXY = U8x2ToUN8x2(uEdgeXY);

    float2 vMin = cid;
    float2 vMax = cid + 1;
    float4 vPos = { vMin, vMax };

    // Read cell data (from local cache if specified, or from global data otherwise)

    uint4 indices = {
        tidx          ,
        tidx+1        ,
        tidx+_MapDim.x,
        0
        };

    uint vMinStateData = VoxelStateData[indices[0]];
    uint xMaxStateData = VoxelStateData[indices[1]];
    uint yMaxStateData = VoxelStateData[indices[2]];

    uint vMinState = vMinStateData & 0xFF;
    uint xMaxState = xMaxStateData & 0xFF;
    uint yMaxState = yMaxStateData & 0xFF;

    uint vMinGeomId = (vMinStateData>>16) & 0xFFFF;
    LineGeom ld = LineGeomData[vMinGeomId];

    // Calculate feature data

    float4 intersectX = FindIntersection(vPos.xy, vPos.zy, ld, 0);
    float4 intersectY = FindIntersection(vPos.xy, vPos.xw, ld, 1);
    bool2 bValidIntersection = float2(intersectX.z, intersectY.z) > .5f;

    float3x2 lineTangents = {
        normalize(ld.P0.zw-ld.P0.xy),
        normalize(ld.P1.xy-ld.P0.zw),
        normalize(ld.P1.zw-ld.P1.xy)
        };

    float3 lineHeadingAngles = (acos(lineTangents._11_21_31) * ((lineTangents._12_22_32<0) ? -1 : 1)) * M_1_PI;

    uint applyEdge = 0;

    [flatten]
    if (bValidIntersection.x && (vMinState != xMaxState))
    {
        [flatten]
        if (vMinState == _FillType)
        {
            [flatten]
            if ((uEdgeXY.x == 0xFFFF) || fEdgeXY.x < intersectX.x)
            {
                applyEdge |= FEATURE_APPLY_X;
            }
        }
        else
        if (xMaxState == _FillType)
        {
            [flatten]
            if ((uEdgeXY.x == 0xFFFF) || fEdgeXY.x > intersectX.x)
            {
                applyEdge |= FEATURE_APPLY_X;
            }
        }
    }

    [flatten]
    if (bValidIntersection.y && (vMinState != yMaxState))
    {
        [flatten]
        if (vMinState == _FillType)
        {
            [flatten]
            if ((uEdgeXY.y == 0xFFFF) || fEdgeXY.y < intersectY.y)
            {
                applyEdge |= FEATURE_APPLY_Y;
            }
        }
        else
        if (yMaxState == _FillType)
        {
            [flatten]
            if ((uEdgeXY.y == 0xFFFF) || fEdgeXY.y > intersectY.y)
            {
                applyEdge |= FEATURE_APPLY_Y;
            }
        }
    }

    // Apply feature case

    [flatten]
    if (applyEdge & FEATURE_APPLY_X)
    {
        uEdgeXY.x = UN8x1ToU8x1(intersectX.x) | (SN8x1ToU8x1(lineHeadingAngles[(uint)(intersectX.w+.5f)]) << 8);
    }

    [flatten]
    if (applyEdge & FEATURE_APPLY_Y)
    {
        uEdgeXY.y = UN8x1ToU8x1(intersectY.y) | (SN8x1ToU8x1(lineHeadingAngles[(uint)(intersectY.w+.5f)]) << 8);
    }

    // Write feature data

    OutVoxelFeatureData[tidx] = U16x2ToU32(uEdgeXY);

    //uint   sv = StencilTexture.Load(int3(tid.xy, 0)).r + .5f;
    //float4 dc = 0;
    //dc.r = sv == 1;
    //dc.g = sv > 1;
    //dc.a = sv > 0;
    //OutDebugTexture[tid.xy] = dc;
}
