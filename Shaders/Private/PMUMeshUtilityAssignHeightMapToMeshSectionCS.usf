////////////////////////////////////////////////////////////////////////////////
//
// MIT License
// 
// Copyright (c) 2018-2019 Nuraga Wiswakarma
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//

/*------------------------------------------------------------------------------
	Compile time parameters:
		THREAD_SIZE_X - The number of threads (x) to launch per workgroup
		THREAD_SIZE_Y - The number of threads (y) to launch per workgroup
------------------------------------------------------------------------------*/

#include "/Engine/Private/Common.ush"

RWBuffer<float> OutPositionData;
RWByteAddressBuffer OutTangentData;

Buffer<float4> ColorData;
Buffer<float2> UVData;

Texture2D HeightTexture;
SamplerState HeightTextureSampler;

uint _VertexCount;
float _HeightScale;
float _InverseMask;
float2 _PositionToUVScale;

#ifndef PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_USE_UV_BUFFER
#define PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_USE_UV_BUFFER 0
#endif

#ifndef PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_USE_COLOR_BUFFER_MASK
#define PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_USE_COLOR_BUFFER_MASK 0
#endif

#ifndef PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_ASSIGN_TANGENTS
#define PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_ASSIGN_TANGENTS 0
#endif

#define TAN_STRIDE 8

uint PackNormalizedFloat4(float4 v)
{
	int4 n;
    n = v * 127.4999f;
    n = n & 0xFF;
	return n.x | (n.y << 8) | (n.z << 16) | (n.w << 24);
}

[numthreads(THREAD_SIZE_X,1,1)]
void AssignHeightMap_PositionOnlyCS(uint3 tid : SV_DispatchThreadID)
{
	const uint VertexId = tid.x;

    // Skip out of bounds threads
    if (VertexId >= _VertexCount)
	{
		return;
	}

    const uint PosAttrId = 3 * VertexId;

    float mask;
    float2 uv;

#if PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_USE_COLOR_BUFFER_MASK
    mask = ColorData[VertexId].a;
    mask = (_InverseMask>.5f) ? (1.f-mask) : mask;
#else
    mask = 1.f;
#endif

#if PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_USE_UV_BUFFER
    uv = UVData[VertexId].xy;
#else
    uv.x = OutPositionData[PosAttrId  ];
    uv.y = OutPositionData[PosAttrId+1];
    uv *= _PositionToUVScale;
#endif

    float hv;
    hv = Texture2DSample(HeightTexture, HeightTextureSampler, uv).x;

#if PMU_MESH_UTILITY_ASSIGN_HEIGHT_MAP_ASSIGN_TANGENTS
    const uint TanAttrId = 2 * VertexId;
    const float2 uvo = _PositionToUVScale;

// 4 Samples
#if 1
    float hpx = Texture2DSample(HeightTexture, HeightTextureSampler, uv+float2(uvo.x, 0.f)).x;
    float hpy = Texture2DSample(HeightTexture, HeightTextureSampler, uv+float2(0.f, uvo.y)).x;
    float hnx = Texture2DSample(HeightTexture, HeightTextureSampler, uv-float2(uvo.x, 0.f)).x;
    float hny = Texture2DSample(HeightTexture, HeightTextureSampler, uv-float2(0.f, uvo.y)).x;

    float3 nx = float3(1,0, (hpx-hnx)*_HeightScale);
    float3 ny = float3(0,1, (hpy-hny)*_HeightScale);
    float3 normal = normalize(cross(nx, ny));
// 3 Samples
#else
    float hx = Texture2DSample(HeightTexture, HeightTextureSampler, uv+float2(uvo.x, 0.f)).x;
    float hy = Texture2DSample(HeightTexture, HeightTextureSampler, uv+float2(0.f, uvo.y)).x;

    float3 nx = float3(1,0, (hx-hv)*_HeightScale);
    float3 ny = float3(0,1, (hy-hv)*_HeightScale);
    float3 normal = normalize(cross(nx, ny));
#endif

    uint ut = PackNormalizedFloat4(float4(1,0,0,0));
    uint un = PackNormalizedFloat4(float4(normal,1.f));

    OutTangentData.Store2(VertexId*TAN_STRIDE, uint2(ut,un));
#endif

    OutPositionData[PosAttrId+2] += hv * _HeightScale * mask;
}
