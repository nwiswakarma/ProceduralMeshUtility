////////////////////////////////////////////////////////////////////////////////
//
// MIT License
// 
// Copyright (c) 2018-2019 Nuraga Wiswakarma
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//

void GenerateFillCell(uint id)
{
    // Skip out-of-bounds threads
    if (id >= _FillCellCount)
    {
        return;
    }

    // Grid dimension and cell dimension
    const uint2 BDim = _GDim / _LDim;
    const uint2 CDim = _LDim-1;
    const uint2 Bounds = CDim * BDim;

    const uint  did = FillCellIdData[id];
    const uint2 tid = { (did % _GDim.x), (did / _GDim.x) };
    const uint2 bid = (tid / _LDim);
    const uint2 cid = (tid % _LDim);
    const uint2 lid = bid * CDim + cid;

    const uint lnum = _LDim.x * _LDim.y;
    const uint vidx = tid.x + tid.y * _GDim.x;
    const uint lidx = lid.x + lid.y * _GDim.x;
    const uint bidx = GetIndex(bid, BDim.x) * lnum + GetIndex(cid, _LDim.x);

    const uint2 boundsMask = (cid < CDim);
    const uint  caseCode = 0x0F;

    uint4 offsetData = OffsetData[bidx];

    // Initialize vertex data

    uint4 color4 = uint4(_Color * 255.f) & 0xFF;
    uint  color  = color4.r | (color4.g<<8) | (color4.b<<16) | (color4.a<<24);

    uint vertexOffset = offsetData.x;
    uint vertexGridOffset = SumData[GetIndex(bid, BDim.x) * _BlockOffset].x;

    float2 uv1 = 1.f / (_GDim-1);
    float4 uvo = { uv1, 0, 0 };

    float2 xy = lid;
    float2 uv = xy*uv1;

    float3 p0 = CreatePos3(xy, CDim*BDim);
    float3 p1 = p0;

    float2   OffsetUV = uv * SAMPLE_SCALE + SAMPLE_OFFSET;
    float2   OffsetBase = GetOffsetSampleBase(OffsetUV);
    float2x4 OffsetNESW = GetOffsetSampleNESW(OffsetUV, uvo*SAMPLE_SCALE);

    // Generate vertex height, normal, and tangent

#if 0
    float3 hSS = GetSurfaceHeightSample(uv, uvo, OffsetNESW);
    float  hSV = hSS.x;
    float2 hSD = hSS.yz;

    float3 hES = GetExtrudeHeightSample(uv, uvo, OffsetNESW);
    float  hEV = hES.x;
    float2 hED = hES.yz;
#else
    float2 hV = GetHeightSampleBase(uv);
    float  hSV = hV.x;
    float  hEV = hV.y;

    float4 hD = GetHeightSampleNESW(uv, uvo, OffsetNESW);
    float2 hSD = hD.xz;
    float2 hED = hD.yw;
#endif

    float3 n0 = -normalize(float3(-hED, 1));
    float3 n1 =  normalize(float3(-hSD, 1));

    float3 t0 = -normalize(float3(1, 0, hED.x * .5f));
    float3 t1 =  normalize(float3(1, 0, hSD.x * .5f));

    p0.z = (hEV - BASE_OFFSET) + OffsetBase.y;
    p1.z = (hSV + BASE_OFFSET) + OffsetBase.x;

    // Pack tangents

    uint ut0 = PackNormalizedFloat4(float4(t0, 0));
    uint ut1 = PackNormalizedFloat4(float4(t1, 0));

    uint un0 = PackNormalizedFloat4(float4(n0, 1));
    uint un1 = PackNormalizedFloat4(float4(n1, 1));

    // Assign vertex

    Vertex v0 = { p0, uv, ut0, un0, color };
    Vertex v1 = { p1, uv, ut1, un1, color };

    uint i0 = vertexOffset;
    uint i1 = i0 + VERTEX_COUNT;

    OutVertexData[i0] = v0;
    OutVertexData[i1] = v1;

    // Write index data except on boundary cells

    if (all(boundsMask))
    {
        // Resolve neighbour corner vertex indices

        const uint3 nids = {
            bidx+1        ,
            bidx+_LDim.x  ,
            bidx+_LDim.x+1
            };

        const uint4 vertexIds = (uint4(
            vertexOffset,
            OffsetData[nids.x].x,
            OffsetData[nids.y].x,
            OffsetData[nids.z].x
            ) - vertexGridOffset).xywz;

        uint indexOffset = offsetData.y;

        OutIndexData[indexOffset+0] = vertexIds[0];
        OutIndexData[indexOffset+1] = vertexIds[1];
        OutIndexData[indexOffset+2] = vertexIds[2];

        OutIndexData[indexOffset+3] = vertexIds[0];
        OutIndexData[indexOffset+4] = vertexIds[2];
        OutIndexData[indexOffset+5] = vertexIds[3];

        OutIndexData[indexOffset+INDEX_COUNT+0] = vertexIds[2];
        OutIndexData[indexOffset+INDEX_COUNT+1] = vertexIds[1];
        OutIndexData[indexOffset+INDEX_COUNT+2] = vertexIds[0];

        OutIndexData[indexOffset+INDEX_COUNT+3] = vertexIds[3];
        OutIndexData[indexOffset+INDEX_COUNT+4] = vertexIds[2];
        OutIndexData[indexOffset+INDEX_COUNT+5] = vertexIds[0];
    }
}

void GenerateEdgeCell(uint id)
{
    // Skip out-of-bounds threads
    if (id >= _EdgeCellCount)
    {
        return;
    }

    // Grid dimension and cell dimension
    const uint2 BDim = _GDim / _LDim;
    const uint2 CDim = _LDim-1;
    const uint2 Bounds = CDim * BDim;

    const uint  did = EdgeCellIdData[id];
    const uint2 tid = { (did % _GDim.x), (did / _GDim.x) };
    const uint2 bid = (tid / _LDim);
    const uint2 cid = (tid % _LDim);
    const uint2 lid = bid * CDim + cid;

    const uint lnum = _LDim.x * _LDim.y;
    const uint vidx = tid.x + tid.y * _GDim.x;
    const uint lidx = lid.x + lid.y * _GDim.x;
    const uint bidx = GetIndex(bid, BDim.x) * lnum + GetIndex(cid, _LDim.x);

    const uint2 boundsMask = (cid < CDim);

    // Query cell case

    uint cellCase = CellCaseData[bidx];
    uint caseCode = cellCase & 0x1F;

    uint4 offsetData = OffsetData[bidx];

    float2 cornerPos[3] = {
        float2(0, 0),
        float2(1, 0),
        float2(0, 1)
        };

    // Cell geometry data

    uint2  cellFeatures = U32ToU16x2(VoxelFeatureData[lidx]);
    float2 edgeFeatures = U8x2ToUN8x2(cellFeatures);

    float2 edgeAngles = U8x2ToSN8x2(cellFeatures >> 8) * PI;
    float2 edgeNormals[2] = {
        float2(sin(edgeAngles[0]), -cos(edgeAngles[0])),
        float2(sin(edgeAngles[1]), -cos(edgeAngles[1]))
        };

    uint cellClass = CellClass[caseCode];
    uint vertData[3] = VertexData[caseCode];

    uint vCount = (cellClass >> 4) & 0x0F;
    uint tCount = (cellClass >> 8) & 0x0F * all(boundsMask);

    // Write vertex data

    uint4 color4 = uint4(_Color * 255.f) & 0xFF;
    uint  color  = color4.r | (color4.g<<8) | (color4.b<<16) | (color4.a<<24);

    uint vertexOffset = offsetData.x;
    uint vertexGridOffset = SumData[GetIndex(bid, BDim.x) * _BlockOffset].x;

    float2 uv1 = 1.f / (_GDim-1);
    float4 uvo = { uv1, 0, 0 };

    for (uint vertIdx=0; vertIdx<vCount; ++vertIdx)
    {
        float2 edgePos = 0;

        uint edgeCode = vertData[vertIdx];
        uint edgeValueIdx = (edgeCode >> 8) & 0x01;

        uint indexA = (edgeCode >> 4) & 0x0F;
        uint indexB = edgeCode & 0x0F;

        float2 posA = cornerPos[indexA];
        float2 posB = cornerPos[indexB];

        float edgeAlpha = edgeFeatures[edgeValueIdx];

        [flatten]
        if (indexA == indexB)
        {
            edgePos = posA;
        }
        else
        {
            edgePos = lerp(posA, posB, edgeAlpha * boundsMask);
        }

        float2 xy = lid+edgePos;
        float2 uv = xy*uv1;

        float3 p0 = CreatePos3(xy, CDim*BDim);
        float3 p1 = p0;

        float2   OffsetUV = uv * SAMPLE_SCALE + SAMPLE_OFFSET;
        float2   OffsetBase = GetOffsetSampleBase(OffsetUV);
        float2x4 OffsetNESW = GetOffsetSampleNESW(OffsetUV, uvo*SAMPLE_SCALE);

        // Generate vertex height, normal, and tangent

#if 0
        float3 hSS = GetSurfaceHeightSample(uv, uvo, OffsetNESW);
        float  hSV = hSS.x;
        float2 hSD = hSS.yz;

        float3 hES = GetExtrudeHeightSample(uv, uvo, OffsetNESW);
        float  hEV = hES.x;
        float2 hED = hES.yz;
#else
        float2 hV = GetHeightSampleBase(uv);
        float  hSV = hV.x;
        float  hEV = hV.y;

        float4 hD = GetHeightSampleNESW(uv, uvo, OffsetNESW);
        float2 hSD = hD.xz;
        float2 hED = hD.yw;
#endif

        float3 n0 = -normalize(float3(-hED, 1));
        float3 n1 =  normalize(float3(-hSD, 1));

        float3 t0 = -normalize(float3(1, 0, hED.x * .5f));
        float3 t1 =  normalize(float3(1, 0, hSD.x * .5f));

        p0.z = (hEV - BASE_OFFSET) + OffsetBase.y;
        p1.z = (hSV + BASE_OFFSET) + OffsetBase.x;

        // Pack tangents

        uint ut0 = PackNormalizedFloat4(float4(t0, 0));
        uint ut1 = PackNormalizedFloat4(float4(t1, 0));

        uint un0 = PackNormalizedFloat4(float4(n0, 1));
        uint un1 = PackNormalizedFloat4(float4(n1, 1));

        // Assign vertex

        Vertex v0 = { p0, uv, ut0, un0, color };
        Vertex v1 = { p1, uv, ut1, un1, color };

        uint i0 = vertexOffset + vertIdx;
        uint i1 = i0 + VERTEX_COUNT;

        OutVertexData[i0] = v0;
        OutVertexData[i1] = v1;
    }

    const uint4 caseCodes = {
        caseCode,
        CellCaseData[bidx+1        ] & 0x1F,
        CellCaseData[bidx+_LDim.x  ] & 0x1F,
        CellCaseData[bidx+_LDim.x+1] & 0x1F
        };

    const uint4 vertexOffsets = {
        vertexOffset,
        OffsetData[bidx+1        ].x,
        OffsetData[bidx+_LDim.x  ].x,
        OffsetData[bidx+_LDim.x+1].x
        };

    const uint4 vertexMap = {
        VertexMap[caseCode],
        VertexMap[caseCodes[1]],
        VertexMap[caseCodes[2]],
        VertexMap[caseCodes[3]]
        };

    uint indexMap[8] = {
        vertexOffsets      + (vertexMap & 0x03),
        vertexOffsets.xxzy + ((vertexMap.xxzy >> uint2(4, 8).xyxy) & 0x03)
        };

    uint edgeData[MAX_VERTEX_PER_CELL] = EdgeData[caseCode];

    // Write index data

    uint vertexLocalIndices[MAX_INDEX_PER_CELL] = GeomData[cellClass & 0x0F];
    uint indexOffset = offsetData.y;

	for (uint localTriId=0; localTriId<tCount; localTriId++)
	{
        uint ltidx = localTriId * 3;

        uint i0 = vertexLocalIndices[ltidx  ];
        uint i1 = vertexLocalIndices[ltidx+1];
        uint i2 = vertexLocalIndices[ltidx+2];

        uint mi0 = indexMap[edgeData[i0] & 0x07] - vertexGridOffset;
        uint mi1 = indexMap[edgeData[i1] & 0x07] - vertexGridOffset;
        uint mi2 = indexMap[edgeData[i2] & 0x07] - vertexGridOffset;

        OutIndexData[indexOffset+ltidx  ] = mi0;
        OutIndexData[indexOffset+ltidx+1] = mi1;
        OutIndexData[indexOffset+ltidx+2] = mi2;

        OutIndexData[indexOffset+ltidx+INDEX_COUNT  ] = mi2;
        OutIndexData[indexOffset+ltidx+INDEX_COUNT+1] = mi1;
        OutIndexData[indexOffset+ltidx+INDEX_COUNT+2] = mi0;
	}
}
