////////////////////////////////////////////////////////////////////////////////
//
// MIT License
// 
// Copyright (c) 2018-2019 Nuraga Wiswakarma
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//

#include "/Engine/Private/Common.ush"

uint2 U32ToU16x2(uint v)
{
    uint2 unpacked;
    unpacked.x = ((v >>  0) & 0xFFFF);
    unpacked.y = ((v >> 16) & 0xFFFF);
    return unpacked;
}

uint2 U16ToU8x2(uint v)
{
    uint2 unpacked;
    unpacked.x = ((v >>  0) & 0xFF);
    unpacked.y = ((v >> 16) & 0xFF);
    return unpacked;
}

uint U16x2ToU32(uint2 v)
{
    return (v.x & 0xFFFF) | ((v.y & 0xFFFF) << 16);
}

float2 U8x2ToUN8x2(uint2 v)
{
    return (v & 0xFF) / 255.f;
}

uint UN8x1ToU8x1(float v)
{
    return uint(saturate(v) * 255.f) & 0xFF;
}

uint SN8x1ToU8x1(float v)
{
    return uint((v+1.0f) * 127.f);
}

float2 U8x2ToSN8x2(uint2 v)
{
    return ((v&0xFF)/254.0f)*2.0f-1.0f;
}

uint PackSaturateFloat(float v)
{
    return uint(saturate(v) * 255.f) & 0xFF;
}

uint2 PackSaturateFloat2(float2 v)
{
    return uint2(saturate(v) * 255.f) & 0xFF;
}

uint PackNormalizedFloat2(float2 v)
{
	uint2 n = (v+1.0f) * 127.f;
	return n.x | (n.y << 8);
}

uint PackNormalizedFloat4(float4 v)
{
	uint4 n = uint4((v+1.0f) * 127.4999f) & 0xFF;
	return n.x | (n.y << 8) | (n.z << 16) | (n.w << 24);
}

uint PackNormalizedFloat3(float3 v)
{
	uint3 n = uint3((v+1.0f) * 127.4999f) & 0xFF;
	return n.x | (n.y << 8) | (n.z << 16);
}

uint PackTo16(uint2 v)
{
    return (v.x & 0xFF) | ((v.y & 0xFF) << 8);
}

float UnpackSaturatedFloat(uint v)
{
    return (v & 0xFF) / 255.f;
}

float2 UnpackSaturatedFloat2(uint2 v)
{
    return (v & 0xFF) / 255.f;
}

float2 UnpackNormalizedFloat2(uint v)
{
    return (U16ToU8x2(v)/254.0f)*2.0f-1.0f;
}
