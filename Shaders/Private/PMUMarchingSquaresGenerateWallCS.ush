////////////////////////////////////////////////////////////////////////////////
//
// MIT License
// 
// Copyright (c) 2018-2019 Nuraga Wiswakarma
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
////////////////////////////////////////////////////////////////////////////////
//

void GenerateFillCell(uint id)
{
    // Skip out-of-bounds threads
    if (id >= _FillCellCount)
    {
        return;
    }

    // Grid dimension and cell dimension
    const uint2 BDim = _GDim / _LDim;
    const uint2 CDim = _LDim-1;
    const uint2 Bounds = CDim * BDim;

    const uint  did = FillCellIdData[id];
    const uint2 tid = { (did % _GDim.x), (did / _GDim.x) };
    const uint2 bid = (tid / _LDim);
    const uint2 cid = (tid % _LDim);
    const uint2 lid = bid * CDim + cid;

    const uint lnum = _LDim.x * _LDim.y;
    const uint vidx = tid.x + tid.y * _GDim.x;
    const uint lidx = lid.x + lid.y * _GDim.x;
    const uint bidx = GetIndex(bid, BDim.x) * lnum + GetIndex(cid, _LDim.x);

    const uint2 boundsMask = (cid < CDim);
    const uint  caseCode = 0x0F;

    uint4 offsetData = OffsetData[bidx];

    // Initialize vertex data

    uint4 color4 = uint4(_Color * 255.f) & 0xFF;
#if 0
    uint  color  = color4.r | (color4.g<<8) | (color4.b<<16) | (color4.a<<24);
#else
    uint  color  = 0;
#endif

    uint vertexOffset = offsetData.x;
    uint vertexGridOffset = SumData[GetIndex(bid, BDim.x) * _BlockOffset].x;

    float2 uv1 = 1.f / (_GDim-1);
    float4 uvo = { uv1, 0, 0 };

    float2 xy = lid;
    float2 uv = xy*uv1;

    float3 p0 = CreatePos3(xy, CDim*BDim);
    float3 p1 = p0;

    // Generate vertex height, normal, and tangent

    float2 hV = GetHeightSampleBase(uv);
    float  hSV = hV.x;
    float  hEV = hV.y;

    float4 hD = GetHeightSampleNESW(uv, uvo);
    float2 hSD = hD.xz;
    float2 hED = hD.yw;

    float3 n0 = -normalize(float3(-hED, 1));
    float3 n1 =  normalize(float3(-hSD, 1));

    float3 t0 = -normalize(float3(1, 0, hED.x * .5f));
    float3 t1 =  normalize(float3(1, 0, hSD.x * .5f));

    p0.z = hEV - BASE_OFFSET;
    p1.z = hSV + BASE_OFFSET;

    // Pack tangents

    uint ut0 = PackNormalizedFloat4(float4(t0, 0));
    uint ut1 = PackNormalizedFloat4(float4(t1, 0));

    uint un0 = PackNormalizedFloat4(float4(n0, 1));
    uint un1 = PackNormalizedFloat4(float4(n1, 1));

    // Assign vertex

    Vertex v0 = { p0, uv, ut0, un0, color };
    Vertex v1 = { p1, uv, ut1, un1, color };

    uint i0 = vertexOffset;
    uint i1 = i0 + 1;

    OutVertexData[i0] = v0;
    OutVertexData[i1] = v1;

    // Write index data except on boundary cells

    if (all(boundsMask))
    {
        // Resolve neighbour corner vertex indices

        const uint3 nids = {
            bidx+1        ,
            bidx+_LDim.x  ,
            bidx+_LDim.x+1
            };

        const uint4 vertexIds0 = (uint4(
            vertexOffset,
            OffsetData[nids.x].x,
            OffsetData[nids.y].x,
            OffsetData[nids.z].x
            ) - vertexGridOffset).xywz;

        const uint4 vertexIds1 = vertexIds0 + 1;

        uint indexOffset = offsetData.y;

        OutIndexData[indexOffset+0 ] = vertexIds0[0];
        OutIndexData[indexOffset+1 ] = vertexIds0[1];
        OutIndexData[indexOffset+2 ] = vertexIds0[2];

        OutIndexData[indexOffset+3 ] = vertexIds0[0];
        OutIndexData[indexOffset+4 ] = vertexIds0[2];
        OutIndexData[indexOffset+5 ] = vertexIds0[3];

        OutIndexData[indexOffset+6 ] = vertexIds1[2];
        OutIndexData[indexOffset+7 ] = vertexIds1[1];
        OutIndexData[indexOffset+8 ] = vertexIds1[0];

        OutIndexData[indexOffset+9 ] = vertexIds1[3];
        OutIndexData[indexOffset+10] = vertexIds1[2];
        OutIndexData[indexOffset+11] = vertexIds1[0];
    }
}

void GenerateEdgeCell(uint id)
{
    // Skip out-of-bounds threads
    if (id >= _EdgeCellCount)
    {
        return;
    }

    // Grid dimension and cell dimension
    const uint2 BDim = _GDim / _LDim;
    const uint2 CDim = _LDim-1;
    const uint2 Bounds = CDim * BDim;

    const uint  did = EdgeCellIdData[id];
    const uint2 tid = { (did % _GDim.x), (did / _GDim.x) };
    const uint2 bid = (tid / _LDim);
    const uint2 cid = (tid % _LDim);
    const uint2 lid = bid * CDim + cid;

    const uint lnum = _LDim.x * _LDim.y;
    const uint vidx = tid.x + tid.y * _GDim.x;
    const uint lidx = lid.x + lid.y * _GDim.x;
    const uint bidx = GetIndex(bid, BDim.x) * lnum + GetIndex(cid, _LDim.x);

    const uint2 boundsMask = (cid < CDim);

    // Query cell case

    uint cellCase = CellCaseData[bidx];
    uint caseCode = cellCase & 0x1F;

    uint4 offsetData = OffsetData[bidx];

    float2 cornerPos[3] = {
        float2(0, 0),
        float2(1, 0),
        float2(0, 1)
        };

    // Cell geometry data

    uint2  cellFeatures = U32ToU16x2(VoxelFeatureData[lidx]);
    float2 edgeFeatures = U8x2ToUN8x2(cellFeatures);

    float2 edgeAngles = U8x2ToSN8x2(cellFeatures >> 8) * PI;
    float2 edgeNormals[2] = {
        float2(sin(edgeAngles[0]), -cos(edgeAngles[0])),
        float2(sin(edgeAngles[1]), -cos(edgeAngles[1]))
        };

    uint cellClass = CellClass[caseCode];
    uint vertData[3] = VertexData[caseCode];

    uint vCount = (cellClass >> 4) & 0x0F;
    uint tCount = (cellClass >> 8) & 0x0F * all(boundsMask);

    // Wall geometry data

    const uint wallCode  = (cellCase >> 8) & 0x1F;
    const uint wallClass = WallEdge[wallCode];
    const uint2 wallEdges  = { (wallClass & 0x00FF), (wallClass & 0xFF00) >> 8 };
    const uint2 bHasWalls  = (wallEdges != 0);
    const bool2 bValidWall = bHasWalls * all(boundsMask);
    const bool  bHasAnyWalls = any(bHasWalls);

    // Write vertex data

    uint4 color4 = uint4(_Color * 255.f) & 0xFF;
#if 0
    uint  color  = color4.r | (color4.g<<8) | (color4.b<<16) | (color4.a<<24);
#else
    uint  color  = 0;
#endif

    uint vertexOffset = offsetData.x;
    uint vertexGridOffset = SumData[GetIndex(bid, BDim.x) * _BlockOffset].x;

    float2 uv1 = 1.f / (_GDim-1);
    float4 uvo = { uv1, 0, 0 };

    for (uint vertIdx=0; vertIdx<vCount; ++vertIdx)
    {
        // Find edge position

        uint edgeCode = vertData[vertIdx];
        uint edgeValueIdx = (edgeCode >> 8) & 0x01;

        uint indexA = (edgeCode >> 4) & 0x0F;
        uint indexB = edgeCode & 0x0F;

        float2 posA = cornerPos[indexA];
        float2 posB = cornerPos[indexB];

        bool bIsCorner = (indexA == indexB);
        bool bIsWall   = bHasAnyWalls * !bIsCorner;

        float  edgeAlpha = edgeFeatures[edgeValueIdx];
        float2 edgePos = lerp(posA, posB, edgeAlpha*boundsMask*!bIsCorner);
        float2 edgeNrm = edgeNormals[edgeValueIdx] * bIsWall;

        float2 xy = lid+edgePos;
        float2 uv = xy*uv1;

        float3 p0 = CreatePos3(xy, CDim*BDim);
        float3 p1 = p0;

        // Generate vertex height, normal, and tangent

        float2 hV = GetHeightSampleBase(uv);
        float  hSV = hV.x;
        float  hEV = hV.y;

        float4 hD = GetHeightSampleNESW(uv, uvo);
        float2 hSD = hD.xz;
        float2 hED = hD.yw;

        float3 n0 = normalize(-normalize(float3(-hED, 1)) + float3(edgeNrm,0));
        float3 n1 = normalize( normalize(float3(-hSD, 1)) + float3(edgeNrm,0));

        float3 t0 = -normalize(float3(1, 0, hED.x * .5f));
        float3 t1 =  normalize(float3(1, 0, hSD.x * .5f));

        p0.z = hEV - BASE_OFFSET;
        p1.z = hSV + BASE_OFFSET;

        // Pack tangents

        uint ut0 = PackNormalizedFloat4(float4(t0, 0));
        uint ut1 = PackNormalizedFloat4(float4(t1, 0));

        uint un0 = PackNormalizedFloat4(float4(n0, 1));
        uint un1 = PackNormalizedFloat4(float4(n1, 1));

        // Write vertex data

        Vertex v0 = { p0, uv, ut0, un0, color };
        Vertex v1 = { p1, uv, ut1, un1, color };

        uint i0 = vertexOffset + vertIdx*2;
        uint i1 = i0 + 1;

        OutVertexData[i0] = v0;
        OutVertexData[i1] = v1;
    }

    const uint4 caseCodes = {
        caseCode,
        CellCaseData[bidx+1        ] & 0x1F,
        CellCaseData[bidx+_LDim.x  ] & 0x1F,
        CellCaseData[bidx+_LDim.x+1] & 0x1F
        };

    const uint4 vertexOffsets = {
        vertexOffset,
        OffsetData[bidx+1        ].x,
        OffsetData[bidx+_LDim.x  ].x,
        OffsetData[bidx+_LDim.x+1].x
        };

    const uint4 vertexMap = {
        VertexMap[caseCode],
        VertexMap[caseCodes[1]],
        VertexMap[caseCodes[2]],
        VertexMap[caseCodes[3]]
        };

    uint indexMap[8] = {
        vertexOffsets      + (vertexMap & 0x03) * 2,
        vertexOffsets.xxzy + ((vertexMap.xxzy >> uint2(4, 8).xyxy) & 0x03) * 2
        };

    uint edgeData[MAX_VERTEX_PER_CELL] = EdgeData[caseCode];

    // Write index data

    uint vertexLocalIndices[MAX_INDEX_PER_CELL] = GeomData[cellClass & 0x0F];
    uint indexOffset = offsetData.y;

	for (uint localTriId=0; localTriId<tCount; localTriId++)
	{
        uint vtidx = localTriId * 3;
        uint ltidx = localTriId * 6;

        uint i0 = vertexLocalIndices[vtidx  ];
        uint i1 = vertexLocalIndices[vtidx+1];
        uint i2 = vertexLocalIndices[vtidx+2];

        uint mi0 = indexMap[edgeData[i0] & 0x07] - vertexGridOffset;
        uint mi1 = indexMap[edgeData[i1] & 0x07] - vertexGridOffset;
        uint mi2 = indexMap[edgeData[i2] & 0x07] - vertexGridOffset;

        OutIndexData[indexOffset+ltidx  ] = mi0;
        OutIndexData[indexOffset+ltidx+1] = mi1;
        OutIndexData[indexOffset+ltidx+2] = mi2;

        OutIndexData[indexOffset+ltidx+3] = mi2+1;
        OutIndexData[indexOffset+ltidx+4] = mi1+1;
        OutIndexData[indexOffset+ltidx+5] = mi0+1;
	}

    indexOffset += tCount * 3 * 2;

    // Construct wall geometry

    // Duplicate edge vertices for wall edge faces

    uint4 wallVertexOffset = ((vertexMap.xxzy & 0x03) == 0);
    uint  wallVertexCount  = (vCount - wallVertexOffset.x) * bHasAnyWalls;
    uint  wallTangent = PackNormalizedFloat4(float4(0,0,-1,0));

    for (uint wvidx=0; wvidx<wallVertexCount; ++wvidx)
    {
        uint4 wo = wvidx * 4 + uint4(0, 1, 2, 3);
        uint2 vo = wvidx * 2 + uint2(0, 1);
        uint4 wi = wo + vertexOffset + vCount*2;
        uint2 vi = vo + vertexOffset + wallVertexOffset.x*2;

        uint edgeCode = vertData[wvidx+wallVertexOffset.x];
        uint edgeVIdx = (edgeCode >> 8) & 0x01;
        uint edgeNrm  = PackNormalizedFloat4(float4(normalize(float3(edgeNormals[edgeVIdx], 0)), 1));

        // Copy wall edge vertices

        Vertex v0 = OutVertexData[vi.x];
        Vertex v1 = OutVertexData[vi.y];

        v0.tangentX = wallTangent;
        v1.tangentX = wallTangent;

        v0.uv = float2(0, 1);
        v1.uv = float2(0, 1);

        v0.color |= (0xFF << 24);
        v1.color |= (0xFF << 24);

        // Copy inner wall vertices

        Vertex v2 = v0;
        Vertex v3 = v1;

        v2.position.z *= 0.5f;
        v3.position.z *= 0.5f;

        v2.uv.y = 1.f/3.f;
        v3.uv.y = 2.f/3.f;

        v2.color |= (0xFF << 24);
        v3.color |= (0xFF << 24);

        v2.tangentZ = edgeNrm;
        v3.tangentZ = edgeNrm;

        // Write vertex data

        OutVertexData[wi.x] = v0;
        OutVertexData[wi.y] = v1;

        OutVertexData[wi.z] = v2;
        OutVertexData[wi.w] = v3;
    }

    // Write wall face indices

    const uint2 nvCount = (uint2(CellClass[caseCodes[2]], CellClass[caseCodes[1]]) >> 4) & 0x0F;

    uint4 wallIndexMap = {
        vertexOffsets.xx + (vCount  * 2),
        vertexOffsets.zy + (nvCount * 2)
        };
    wallIndexMap += (((vertexMap.xxzy >> uint2(4, 8).xyxy) & 0x03) - wallVertexOffset) * 4;

    if (bValidWall[0])
    {
        uint2 we = { (wallEdges[0] & 0x0F), (wallEdges[0] & 0xF0) >> 4 };
        uint4 mi0, mi1;

        we     = (we-4) & 0x03;
        mi0.xy = uint2(wallIndexMap[we.x], wallIndexMap[we.y]) - vertexGridOffset;
        mi0.zw = mi0.xy + 1;
        mi1    = mi0 + 2;

        OutIndexData[indexOffset   ] = mi0[1];
        OutIndexData[indexOffset+1 ] = mi1[1];
        OutIndexData[indexOffset+2 ] = mi0[0];

        OutIndexData[indexOffset+3 ] = mi1[1];
        OutIndexData[indexOffset+4 ] = mi1[0];
        OutIndexData[indexOffset+5 ] = mi0[0];

        OutIndexData[indexOffset+6 ] = mi1[1];
        OutIndexData[indexOffset+7 ] = mi1[3];
        OutIndexData[indexOffset+8 ] = mi1[0];

        OutIndexData[indexOffset+9 ] = mi1[3];
        OutIndexData[indexOffset+10] = mi1[2];
        OutIndexData[indexOffset+11] = mi1[0];

        OutIndexData[indexOffset+12] = mi1[3];
        OutIndexData[indexOffset+13] = mi0[3];
        OutIndexData[indexOffset+14] = mi1[2];

        OutIndexData[indexOffset+15] = mi0[3];
        OutIndexData[indexOffset+16] = mi0[2];
        OutIndexData[indexOffset+17] = mi1[2];
    }

    indexOffset += 18;

    if (bValidWall[1])
    {
        uint2 we = { (wallEdges[1] & 0x0F), (wallEdges[1] & 0xF0) >> 4 };
        uint4 mi0, mi1;

        we     = (we-4) & 0x03;
        mi0.xy = uint2(wallIndexMap[we.x], wallIndexMap[we.y]) - vertexGridOffset;
        mi0.zw = mi0.xy + 1;
        mi1    = mi0 + 2;

        OutIndexData[indexOffset   ] = mi0[1];
        OutIndexData[indexOffset+1 ] = mi1[1];
        OutIndexData[indexOffset+2 ] = mi0[0];

        OutIndexData[indexOffset+3 ] = mi1[1];
        OutIndexData[indexOffset+4 ] = mi1[0];
        OutIndexData[indexOffset+5 ] = mi0[0];

        OutIndexData[indexOffset+6 ] = mi1[1];
        OutIndexData[indexOffset+7 ] = mi1[3];
        OutIndexData[indexOffset+8 ] = mi1[0];

        OutIndexData[indexOffset+9 ] = mi1[3];
        OutIndexData[indexOffset+10] = mi1[2];
        OutIndexData[indexOffset+11] = mi1[0];

        OutIndexData[indexOffset+12] = mi1[3];
        OutIndexData[indexOffset+13] = mi0[3];
        OutIndexData[indexOffset+14] = mi1[2];

        OutIndexData[indexOffset+15] = mi0[3];
        OutIndexData[indexOffset+16] = mi0[2];
        OutIndexData[indexOffset+17] = mi1[2];
    }
}
